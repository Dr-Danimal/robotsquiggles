{"version":3,"sources":["components/units.tsx","components/new_path.jsx","components/generated.tsx","theme.js","components/sidebar.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["FIELD_METERS","DrawNewPath","props","mount","useRef","two","group","startWidth","savedBoundingRect","savedLeft","prevMode","prevLatch","prevField","listeners","theme","useTheme","neutralColor","editColor","palette","primary","main","robotColor","light","blue","red","blueBalls","redBalls","getCursorPosition","e","x","clientX","y","clientY","left","current","top","scene","scale","addInteractivity","shape","offset","translation","drag","preventDefault","cursor","set","touchDrag","touch","originalEvent","changedTouches","pageX","pageY","dragEnd","latch","paths","forEach","p","vectors","v","r","id","Math","abs","rotation","PI","window","removeEventListener","touchEnd","addNewEventListener","_renderer","elem","addEventListener","createAnchorPoint","anchor","newPath","pathKey","idx","robotSquare","_collection","console","log","trackWidth","makeRectangle","width","noFill","stroke","linewidth","add","makeCircle","makePolygon","atan2","controls","right","copy","addSelf","noStroke","fill","rl","Two","Path","Anchor","g","makeGroup","bind","Events","change","this","vertices","setPaths","Map","waypoints","get","map","s","path","subSelf","opp","Vector","rot","update","updatedVec","newVec","Array","from","splice","push","drawLine","anchors","cap","join","placePoints","point","size","str","curKey","keys","k","charCodeAt","curPath","length","lastPoint","i","remove","createPath","substring","String","fromCharCode","setMode","node","event","handler","listener","removeAllEventListeners","capSize","newWidth","max","min","useEffect","rand_gray","value","random","toString","getBoundingClientRect","height","autostart","appendTo","tile_width","field_center","field_bot","field_right","goal_radius","goal_linewidth","double_line_space","line_width","background","bg","j","rec","field_tiles","left_autonline","makeLine","right_autonline","left_line","right_line","leftdoubletop_line","leftdoublebot_line","rightdoubletop_line","rightdoublebot_line","lines","topcenter_goal","topleft_goal","topright_goal","leftcenter_goal","center_goal","rightcenter_goal","botleft_goal","botcenter_goal","botright_goal","goals","field","resize","renderer","setSize","setCanvasDims","boxWidth","open","drawerWidth","mode","key","midpoint","getPointAt","r2","addMidpoint","cos","sin","pop","delete","ballRadius","blueCenterLeft","blueCenterBot","blueBotMidCenter","blueBotCenter","blueBotLeft","blueLeftCenter","blueTopLeft","blueTopRight","blueBotRight","redCenterRight","redCenterTop","redTopMidCenter","redTopCenter","redTopRight","redRightCenter","redBotRight","redTopLeft","redBotLeft","compSetup","blueCenter","blueTopCenter","blueRightCenter","redCenterLeft","redCenterBot","redBotMidCenter","redTopCenterLeft","redBotCenterLeft","redTopCenterRight","redBotCenterRight","skillsSetup","ref","TabPanel","children","index","other","role","hidden","aria-labelledby","Box","pt","style","backgroundColor","a11yProps","useStyles","makeStyles","root","flexGrow","paper","maxWidth","SimpleTabs","classes","React","useState","setValue","squigglesCoords","yaw","canvasDims","okapiCoords","className","AppBar","position","Tabs","onChange","newValue","aria-label","Tab","label","text","out","maxVel","maxAccel","maxJerk","slice","vec","coords","toFixed","okapiCode","language","showLineNumbers","atomOneDark","codeBlock","squigglesCode","themeColor","createMuiTheme","dark","overrides","MuiToggleButton","color","createStyles","drawerHeader","display","alignItems","padding","spacing","mixins","toolbar","justifyContent","SidebarContent","seasons","IconButton","onClick","handleDrawerClose","direction","Divider","List","ListItem","Typography","variant","ToggleButtonGroup","exclusive","newMode","ToggleButton","FormControlLabel","control","Checkbox","checked","setLatch","target","name","TextField","required","setTrackWidth","setMaxVel","setMaxAccel","setMaxJerk","fullWidth","select","defaultValue","MenuItem","newField","setField","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","content","overflow","contentShift","App","setOpen","innerWidth","innerHeight","ThemeProvider","CssBaseline","clsx","Toolbar","edge","noWrap","Drawer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e54f69e.chunk.js","sourcesContent":["export const FIELD_METERS = 3.6576;\n","import React, { useEffect, useRef } from \"react\";\nimport { useTheme } from \"@material-ui/core\";\nimport Two from \"two.js\";\n\nimport { FIELD_METERS } from \"./units\";\nimport { keys } from \"@material-ui/core/styles/createBreakpoints\";\n\nexport const DrawNewPath = (props) => {\n  const mount = useRef(null);\n  const two = useRef(null);\n  const group = useRef(null);\n\n  const startWidth = useRef(null);\n  const savedBoundingRect = useRef(null);\n  const savedLeft = useRef(null);\n\n  const prevMode = useRef(null);\n  const prevLatch = useRef(null);\n  const prevField = useRef(null);\n  const listeners = useRef([]);\n\n  const theme = useTheme();\n  const neutralColor = \"#333\";\n  const editColor = theme.palette.primary.main;\n  const robotColor = theme.palette.primary.light;\n  const blue = \"rgb(70, 70, 255)\";\n  const red = \"rgb(255, 40, 40)\";\n  const blueBalls = useRef(null);\n  const redBalls = useRef(null);\n\n  /**\n   * Modifies the mouse event to fit with the Two canvas coordinates.\n   *\n   * @param e The mouse event\n   *\n   * @returns {x: number, y: number}\n   */\n  const getCursorPosition = (e) => {\n    let x = e.clientX;\n    let y = e.clientY;\n    // relying on savedLeft to tell us if the drawer is open\n    let left = savedBoundingRect.current.left + savedLeft.current ?? 0;\n    let top = savedBoundingRect.current.top;\n    return {\n      x: (x - left) / two.current.scene.scale,\n      y: (y - top) / two.current.scene.scale,\n    };\n  };\n\n  const addInteractivity = (shape) => {\n    const offset = group.current.translation;\n\n    var drag = function (e) {\n      e.preventDefault();\n      const cursor = getCursorPosition(e);\n      var x = cursor.x - offset.x;\n      var y = cursor.y - offset.y;\n      shape.translation.set(x, y);\n    };\n    var touchDrag = function (e) {\n      e.preventDefault();\n      var touch = e.originalEvent.changedTouches[0];\n      drag({\n        preventDefault: function () {},\n        clientX: touch.pageX,\n        clientY: touch.pageY,\n      });\n      return false;\n    };\n    var dragEnd = function (e) {\n      e.preventDefault();\n\n      if (props.latch) {\n        props.paths.forEach((p) => {\n          p.vectors.forEach((v) => {\n            if (v.r.id === shape.id) {\n              // This shape is a vector head, latch the vector angle using its point\n              if (\n                Math.abs(shape.rotation) < 0.1 ||\n                Math.abs(shape.rotation - Math.PI) < 0.1\n              ) {\n                shape.translation.set(v.p.translation.x, shape.translation.y);\n              } else if (\n                Math.abs(Math.abs(shape.rotation) - Math.PI / 2) < 0.1 ||\n                Math.abs(shape.rotation - (3 * Math.PI) / 2) < 0.1\n              ) {\n                shape.translation.set(shape.translation.x, v.p.translation.y);\n              }\n            }\n          });\n        });\n      }\n\n      window.removeEventListener(\"mousemove\", drag);\n      window.removeEventListener(\"mouseup\", dragEnd);\n    };\n    var touchEnd = function (e) {\n      e.preventDefault();\n      window.removeEventListener(\"touchmove\", touchDrag);\n      window.removeEventListener(\"touchend\", touchEnd);\n      return false;\n    };\n\n    addNewEventListener(shape._renderer.elem, \"mousedown\", function (e) {\n      e.preventDefault();\n      window.addEventListener(\"mousemove\", drag);\n      window.addEventListener(\"mouseup\", dragEnd);\n    });\n    addNewEventListener(shape._renderer.elem, \"touchstart\", function (e) {\n      e.preventDefault();\n      window.addEventListener(\"touchmove\", touchDrag);\n      window.addEventListener(\"touchend\", touchEnd);\n      return false;\n    });\n  };\n\n  const createAnchorPoint = (anchor, newPath, pathKey, idx) => {\n    let robotSquare;\n    if (pathKey === \"A\" && anchor === newPath._collection[0]) {\n      // put the robot on the first path's start\n      console.log(props.trackWidth);\n      robotSquare = two.current.makeRectangle(\n        anchor.x,\n        anchor.y,\n        (two.current.width / FIELD_METERS) * props.trackWidth,\n        (two.current.width / FIELD_METERS) * props.trackWidth\n      );\n      robotSquare.noFill().stroke = robotColor;\n      robotSquare.linewidth = 2;\n      group.current.add(robotSquare);\n    }\n    const p = two.current.makeCircle(0, 0, 10);\n    const r = two.current.makePolygon(0, 0, 10);\n    r.rotation =\n      Math.atan2(anchor.controls.right.y, anchor.controls.right.x) +\n      Math.PI / 2;\n\n    p.translation.copy(anchor);\n    r.translation.copy(anchor.controls.right).addSelf(anchor);\n    p.noStroke().fill = r.noStroke().fill = editColor;\n\n    const rl = new Two.Path([\n      new Two.Anchor().copy(p.translation),\n      new Two.Anchor().copy(r.translation),\n    ]);\n    rl.noFill().stroke = editColor;\n\n    const g = two.current.makeGroup(rl, p, r);\n    g.translation.addSelf(newPath.translation);\n    group.current.add(g);\n\n    p.translation.bind(Two.Events.change, function () {\n      anchor.copy(this);\n      r.translation.copy(anchor.controls.right).addSelf(this);\n      rl.vertices[0].copy(this);\n      rl.vertices[1].copy(r.translation);\n      if (robotSquare) robotSquare.translation.copy(this);\n      props.setPaths(\n        new Map(\n          props.paths.set(pathKey, {\n            waypoints: props.paths.get(pathKey).waypoints,\n            vectors: props.paths\n              .get(pathKey)\n              .vectors.map((v) =>\n                v.p.id === p.id ? { s: v.s, g: v.g, p: p, r: v.r } : v\n              ),\n            path: props.paths.get(pathKey).path,\n          })\n        )\n      );\n    });\n    r.translation.bind(Two.Events.change, function () {\n      anchor.controls.right.copy(this).subSelf(anchor);\n      rl.vertices[1].copy(this);\n\n      const x = -1 * (anchor.controls.right.x - anchor.x);\n      const y = -1 * (anchor.controls.right.y - anchor.y);\n      const opp = new Two.Vector(x, y);\n      anchor.controls.left.copy(opp).subSelf(anchor);\n\n      const rot =\n        Math.atan2(anchor.controls.right.y, anchor.controls.right.x) +\n        Math.PI / 2;\n      r.rotation = rot;\n      if (robotSquare) robotSquare.rotation = rot;\n      props.setPaths(\n        new Map(\n          props.paths.set(pathKey, {\n            waypoints: props.paths.get(pathKey).waypoints,\n            vectors: props.paths\n              .get(pathKey)\n              .vectors.map((v) =>\n                v.r.id === r.id ? { s: v.s, g: v.g, p: v.p, r: r } : v\n              ),\n            path: props.paths.get(pathKey).path,\n          })\n        )\n      );\n    });\n\n    // Update the renderer in order to generate the actual elements.\n    two.current.update();\n\n    const newVec = { s: robotSquare, g: g, p: p, r: r };\n    let updatedVec;\n    if (idx) {\n      updatedVec = Array.from(props.paths.get(pathKey).vectors);\n      updatedVec.splice(idx, 0, newVec);\n    } else {\n      updatedVec = Array.from(props.paths.get(pathKey).vectors);\n      console.log(updatedVec);\n      updatedVec.push(newVec);\n    }\n    console.log(updatedVec);\n    props.setPaths(\n      new Map(\n        props.paths.set(pathKey, {\n          waypoints: props.paths.get(pathKey).waypoints,\n          vectors: updatedVec,\n          path: newPath,\n        })\n      )\n    );\n  };\n\n  const drawLine = (anchors) => {\n    const newPath = new Two.Path(anchors, false, true, true);\n    newPath.cap = newPath.join = \"round\";\n    newPath.noFill().stroke = neutralColor;\n    newPath.linewidth = 5;\n    group.current.add(newPath);\n    return newPath;\n  };\n\n  const createPath = (pathKey) => {\n    const anchors = [];\n    const lastPoint = props.paths.get(pathKey)[\"waypoints\"].length - 1;\n    for (let i = lastPoint; i >= 0; --i) {\n      // iterate backwards through points so we are driving the right direction\n      const p = props.paths.get(pathKey).waypoints[i];\n      let anchor;\n      if (i === lastPoint) {\n        anchor = new Two.Anchor(\n          p.translation.x,\n          p.translation.y,\n          0,\n          100,\n          0,\n          -100,\n          \"M\"\n        );\n        anchors.push(anchor);\n      } else {\n        anchor = new Two.Anchor(\n          p.translation.x,\n          p.translation.y,\n          0,\n          100,\n          0,\n          -100,\n          \"C\"\n        );\n        anchors.push(anchor);\n      }\n      two.current.remove(p);\n      two.current.update(); // render the elements before adding interactivity\n    }\n\n    group.current = two.current.makeGroup();\n    const newPath = drawLine(anchors);\n\n    newPath.vertices.forEach(function (anchor) {\n      createAnchorPoint(anchor, newPath, pathKey);\n    });\n  };\n\n  const nextChar = (str) => {\n    return (\n      str.substring(0, str.length - 1) +\n      String.fromCharCode(str.charCodeAt(str.length - 1) + 1)\n    );\n  };\n\n  const curPath = () => {\n    let curKey = \"A\";\n    for (const k of props.paths.keys()) {\n      if (k.charCodeAt(0) > curKey.charCodeAt(0)) {\n        curKey = k;\n      }\n    }\n    return curKey;\n  };\n\n  const placePoints = (e) => {\n    e.preventDefault();\n\n    const cursor = getCursorPosition(e);\n    const point = two.current.makeCircle(cursor.x, cursor.y, 10);\n    point.fill = editColor;\n    if (props.paths.size === 0) {\n      props.setPaths(\n        new Map(\n          props.paths.set(\"A\", {\n            waypoints: [],\n            vectors: [],\n            path: null,\n          })\n        )\n      );\n    }\n    const pathKey = curPath();\n    props.setPaths(\n      new Map(\n        props.paths.set(pathKey, {\n          waypoints: [point, ...props.paths.get(pathKey).waypoints],\n          vectors: props.paths.get(pathKey).vectors,\n          path: props.paths.get(pathKey).path,\n        })\n      )\n    );\n\n    if (props.paths.get(pathKey)[\"waypoints\"].length > 1) {\n      createPath(pathKey);\n      // create the next path's array\n      props.setPaths(\n        new Map(\n          props.paths.set(nextChar(pathKey), {\n            waypoints: [],\n            vectors: [],\n            path: null,\n          })\n        )\n      );\n      props.setMode(\"EDIT\");\n    }\n  };\n\n  const addMidpoint = (path) => {\n    const midpoint = path.path.getPointAt(0.5);\n    const p = two.current.makeCircle(midpoint.x, midpoint.y, 10);\n    const r2 = two.current.makePolygon(0, 0, 10);\n    r2.rotation =\n      Math.atan2(midpoint.controls.right.y, midpoint.controls.right.x) +\n      Math.PI / 2;\n    r2.translation.copy(midpoint.controls.right).addSelf(midpoint);\n    return { p: p, r: r2 };\n  };\n\n  const addNewEventListener = (node, event, handler) => {\n    const listener = { node: node, event: event, handler: handler };\n    for (let i = 0; i < listeners.current.length; ++i) {\n      if (listeners.current[i] === listener) {\n        // the new event is already defined, don't define it again\n        return;\n      }\n    }\n    node.addEventListener(event, handler);\n    listeners.current.push(listener);\n  };\n\n  const removeAllEventListeners = () => {\n    for (let i = 0; i < listeners.current.length; ++i) {\n      const x = listeners.current[i];\n      x?.node?.removeEventListener(x.event, x.handler);\n    }\n    listeners.current = [];\n  };\n\n  const capSize = (newWidth) => {\n    return Math.max(100, Math.min(newWidth, 800));\n  };\n\n  const compSetup = () => {\n    const tile_width = startWidth.current / 6;\n    const field_center = tile_width * 3;\n    const field_top = 0;\n    const field_bot = tile_width * 6;\n    const field_right = tile_width * 6;\n\n    const goal_radius = tile_width / 5;\n    const goal_linewidth = tile_width / 8;\n    const ballRadius = goal_radius - goal_linewidth / 2;\n\n    const blueCenterLeft = two.current.makeCircle(\n      field_center - goal_radius - goal_linewidth - ballRadius,\n      field_center,\n      ballRadius\n    );\n    const blueCenterBot = two.current.makeCircle(\n      field_center,\n      field_center + goal_radius + goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 4.5,\n      ballRadius\n    );\n    const blueBotCenter = two.current.makeCircle(\n      field_center,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueBotLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueLeftCenter = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_center,\n      ballRadius\n    );\n    const blueTopLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueTopRight = two.current.makeCircle(\n      field_right - 2 * goal_linewidth - ballRadius - goal_radius,\n      goal_radius + 2 * goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotRight = two.current.makeCircle(\n      field_right - 2 * goal_linewidth - ballRadius - goal_radius,\n      field_bot - goal_radius - 2 * goal_linewidth - ballRadius,\n      ballRadius\n    );\n    blueBalls.current = two.current.makeGroup(\n      blueCenterLeft,\n      blueCenterBot,\n      blueBotMidCenter,\n      blueBotCenter,\n      blueBotLeft,\n      blueLeftCenter,\n      blueTopLeft,\n      blueTopRight,\n      blueBotRight\n    );\n    blueBalls.current.fill = blue;\n\n    const redCenterRight = two.current.makeCircle(\n      field_center + goal_radius + goal_linewidth + ballRadius,\n      field_center,\n      ballRadius\n    );\n    const redCenterTop = two.current.makeCircle(\n      field_center,\n      field_center - goal_radius - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const redTopMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 1.5,\n      ballRadius\n    );\n    const redTopCenter = two.current.makeCircle(\n      field_center,\n      field_top + goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const redTopRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const redRightCenter = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_center,\n      ballRadius\n    );\n    const redBotRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const redTopLeft = two.current.makeCircle(\n      2 * goal_linewidth + ballRadius + goal_radius,\n      goal_radius + 2 * goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const redBotLeft = two.current.makeCircle(\n      2 * goal_linewidth + ballRadius + goal_radius,\n      field_bot - goal_radius - 2 * goal_linewidth - ballRadius,\n      ballRadius\n    );\n    redBalls.current = two.current.makeGroup(\n      redCenterRight,\n      redCenterTop,\n      redTopMidCenter,\n      redTopCenter,\n      redTopRight,\n      redRightCenter,\n      redTopRight,\n      redBotRight,\n      redTopLeft,\n      redBotLeft\n    );\n    redBalls.current.fill = red;\n  };\n\n  const skillsSetup = () => {\n    const tile_width = startWidth.current / 6;\n    const field_center = tile_width * 3;\n    const field_top = 0;\n    const field_bot = tile_width * 6;\n    const field_right = tile_width * 6;\n\n    const goal_radius = tile_width / 5;\n    const goal_linewidth = tile_width / 8;\n    const ballRadius = goal_radius - goal_linewidth / 2;\n\n    const blueCenter = two.current.makeCircle(\n      field_center,\n      field_center,\n      ballRadius\n    );\n    const blueBotCenter = two.current.makeCircle(\n      field_center,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueTopCenter = two.current.makeCircle(\n      field_center,\n      field_top + goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueLeftCenter = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_center,\n      ballRadius\n    );\n    const blueTopLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueTopRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueRightCenter = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_center,\n      ballRadius\n    );\n    blueBalls.current = two.current.makeGroup(\n      blueCenter,\n      blueBotCenter,\n      blueTopCenter,\n      blueBotLeft,\n      blueLeftCenter,\n      blueTopLeft,\n      blueTopRight,\n      blueBotRight,\n      blueRightCenter\n    );\n    blueBalls.current.fill = blue;\n\n    const redCenterRight = two.current.makeCircle(\n      tile_width * 4,\n      field_center,\n      ballRadius\n    );\n    const redCenterLeft = two.current.makeCircle(\n      tile_width * 2,\n      field_center,\n      ballRadius\n    );\n    const redCenterTop = two.current.makeCircle(\n      field_center,\n      tile_width * 2,\n      ballRadius\n    );\n    const redTopMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 1,\n      ballRadius\n    );\n    const redCenterBot = two.current.makeCircle(\n      field_center,\n      tile_width * 4,\n      ballRadius\n    );\n    const redBotMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 5,\n      ballRadius\n    );\n    const redTopLeft = two.current.makeCircle(\n      tile_width * 1.5,\n      ballRadius,\n      ballRadius\n    );\n    const redBotLeft = two.current.makeCircle(\n      tile_width * 1.5,\n      field_bot - ballRadius,\n      ballRadius\n    );\n    const redTopRight = two.current.makeCircle(\n      tile_width * 4.5,\n      ballRadius,\n      ballRadius\n    );\n    const redBotRight = two.current.makeCircle(\n      tile_width * 4.5,\n      field_bot - ballRadius,\n      ballRadius\n    );\n    const redTopCenterLeft = two.current.makeCircle(\n      tile_width,\n      tile_width * 1.5,\n      ballRadius\n    );\n    const redBotCenterLeft = two.current.makeCircle(\n      tile_width,\n      tile_width * 4.5,\n      ballRadius\n    );\n    const redTopCenterRight = two.current.makeCircle(\n      tile_width * 5,\n      tile_width * 1.5,\n      ballRadius\n    );\n    const redBotCenterRight = two.current.makeCircle(\n      tile_width * 5,\n      tile_width * 4.5,\n      ballRadius\n    );\n    redBalls.current = two.current.makeGroup(\n      redCenterRight,\n      redCenterTop,\n      redTopMidCenter,\n      redTopLeft,\n      redBotLeft,\n      redTopRight,\n      redBotRight,\n      redCenterBot,\n      redBotMidCenter,\n      redCenterLeft,\n      redTopCenterLeft,\n      redBotCenterLeft,\n      redTopCenterRight,\n      redBotCenterRight\n    );\n    redBalls.current.fill = red;\n  };\n\n  /**\n   * Sets up the field when the component is mounted.\n   */\n  useEffect(() => {\n    const rand_gray = () => {\n      var value = Math.random() * 0xf + 0x50;\n      var grayscale = (value << 16) | (value << 8) | value;\n      return \"#\" + grayscale.toString(16);\n    };\n\n    const field_tiles = (two, bg, tile_width) => {\n      for (var i = 0; i < 6; i++) {\n        var x = tile_width * (i + 0.5);\n        for (var j = 0; j < 6; j++) {\n          var y = tile_width * (j + 0.5);\n          var rec = two.current.makeRectangle(x, y, tile_width, tile_width);\n          rec.fill = rand_gray();\n          bg.add(rec);\n        }\n      }\n    };\n\n    const field = () => {\n      const tile_width = two.current.width / 6;\n      const field_center = tile_width * 3;\n      const field_top = 0;\n      const field_bot = tile_width * 6;\n      const field_right = tile_width * 6;\n\n      const goal_radius = tile_width / 5;\n      const goal_linewidth = tile_width / 8;\n      const goal_fill = \"none\";\n      const goal_stroke = \"rgb(0, 0, 0)\";\n\n      const double_line_space = tile_width / 8;\n      const line_width = tile_width / 12;\n\n      var background = two.current.makeGroup([]);\n      field_tiles(two, background, tile_width);\n\n      var left_autonline = two.current.makeLine(\n        field_center - double_line_space,\n        field_top,\n        field_center - double_line_space,\n        field_bot\n      );\n\n      var right_autonline = two.current.makeLine(\n        field_center + double_line_space,\n        field_top,\n        field_center + double_line_space,\n        field_bot\n      );\n\n      var left_line = two.current.makeLine(\n        tile_width,\n        field_top,\n        tile_width,\n        field_bot\n      );\n\n      var right_line = two.current.makeLine(\n        tile_width * 5,\n        field_top,\n        tile_width * 5,\n        field_bot\n      );\n\n      var leftdoubletop_line = two.current.makeLine(\n        0,\n        field_center - double_line_space,\n        tile_width,\n        field_center - double_line_space\n      );\n\n      var leftdoublebot_line = two.current.makeLine(\n        0,\n        field_center + double_line_space,\n        tile_width,\n        field_center + double_line_space\n      );\n\n      var rightdoubletop_line = two.current.makeLine(\n        tile_width * 5,\n        field_center - double_line_space,\n        tile_width * 6,\n        field_center - double_line_space\n      );\n\n      var rightdoublebot_line = two.current.makeLine(\n        tile_width * 5,\n        field_center + double_line_space,\n        tile_width * 6,\n        field_center + double_line_space\n      );\n\n      var lines = two.current.makeGroup([\n        left_autonline,\n        right_autonline,\n        left_line,\n        right_line,\n        leftdoubletop_line,\n        leftdoublebot_line,\n        rightdoublebot_line,\n        rightdoubletop_line,\n      ]);\n      lines.linewidth = line_width;\n      lines.stroke = \"#fff\";\n\n      var topcenter_goal = two.current.makeCircle(\n        field_center,\n        goal_radius + goal_linewidth / 2,\n        goal_radius\n      );\n\n      var topleft_goal = two.current.makeCircle(\n        goal_radius + goal_linewidth / 2,\n        goal_radius + goal_linewidth / 2,\n        goal_radius\n      );\n\n      var topright_goal = two.current.makeCircle(\n        field_right - goal_radius - goal_linewidth / 2,\n        goal_radius + goal_linewidth / 2,\n        goal_radius\n      );\n\n      var leftcenter_goal = two.current.makeCircle(\n        goal_radius + goal_linewidth / 2,\n        field_center,\n        goal_radius\n      );\n\n      var center_goal = two.current.makeCircle(\n        field_center,\n        field_center,\n        goal_radius\n      );\n\n      var rightcenter_goal = two.current.makeCircle(\n        field_right - goal_radius - goal_linewidth / 2,\n        field_center,\n        goal_radius\n      );\n\n      var botleft_goal = two.current.makeCircle(\n        goal_radius + goal_linewidth / 2,\n        field_bot - goal_radius - goal_linewidth / 2,\n        goal_radius\n      );\n\n      var botcenter_goal = two.current.makeCircle(\n        field_center,\n        field_bot - goal_radius - goal_linewidth / 2,\n        goal_radius\n      );\n\n      var botright_goal = two.current.makeCircle(\n        field_right - goal_radius - goal_linewidth / 2,\n        field_bot - goal_radius - goal_linewidth / 2,\n        goal_radius\n      );\n\n      var goals = two.current.makeGroup([\n        topleft_goal,\n        topcenter_goal,\n        topright_goal,\n        leftcenter_goal,\n        center_goal,\n        rightcenter_goal,\n        botleft_goal,\n        botcenter_goal,\n        botright_goal,\n      ]);\n      goals.fill = goal_fill;\n      goals.stroke = goal_stroke;\n      goals.linewidth = goal_linewidth;\n    };\n\n    const newWidth = mount.current.getBoundingClientRect().width;\n    startWidth.current = capSize(newWidth);\n    if (!two.current) {\n      two.current = new Two({\n        width: startWidth.current,\n        height: startWidth.current,\n        autostart: true,\n      }).appendTo(mount.current);\n      two.current.makeGroup();\n    }\n\n    field();\n\n    window.addEventListener(\"resize\", () => {\n      savedBoundingRect.current = mount.current.getBoundingClientRect();\n      const newWidth = savedBoundingRect.current.width;\n      resize(newWidth);\n    });\n  }, []);\n\n  const resize = (width) => {\n    width = capSize(width);\n    two.current.scene.scale = width / startWidth.current;\n    two.current.renderer.setSize(width, width);\n    props.setCanvasDims({ x: startWidth.current, y: startWidth.current });\n  };\n\n  /**\n   * Resizes the Two.js canvas each time the component updates.\n   */\n  useEffect(() => {\n    if (savedBoundingRect.current === null) {\n      // we have not yet saved a box size, store it\n      // We're storing the bounding client width because it updates out of\n      // sync with the Material UI drawer\n      savedBoundingRect.current = mount.current.getBoundingClientRect();\n    }\n    const boxWidth = savedBoundingRect.current.width;\n    if (props.open) {\n      savedLeft.current = props.drawerWidth;\n      resize(boxWidth - props.drawerWidth);\n    } else {\n      savedLeft.current = 0;\n      resize(boxWidth);\n    }\n  }, [props.open, props.drawerWidth]);\n\n  /**\n   * Handles the State Machine for the edit modes.\n   */\n  useEffect(() => {\n    if (props.mode === prevMode.current && props.latch === prevLatch.current) {\n      // The below state machine only operates on the state transitions\n      return;\n    }\n\n    switch (props.mode) {\n      case \"ADD_PATH\":\n        removeAllEventListeners();\n        props.paths.forEach((p) => {\n          if (!p.path) return;\n          p.path.stroke = neutralColor;\n          p.vectors.forEach((v) => {\n            v.p.fill = neutralColor;\n            v.r.fill = neutralColor;\n          });\n        });\n        addNewEventListener(mount.current, \"click\", placePoints);\n        break;\n      case \"EDIT\":\n        removeAllEventListeners();\n\n        props.paths.forEach((p) => {\n          if (!p.path) return;\n          p.path.stroke = neutralColor;\n          p.vectors.forEach((v) => {\n            addInteractivity(v.p);\n            addInteractivity(v.r);\n\n            v.p.fill = editColor;\n            v.r.fill = editColor;\n          });\n        });\n        break;\n      case \"ADD_POINTS\":\n        removeAllEventListeners();\n\n        props.paths.forEach((p, key, map) => {\n          if (!p.path) return;\n\n          p.vectors.forEach((v) => {\n            v.p.fill = neutralColor;\n            v.r.fill = neutralColor;\n          });\n          p.path.stroke = editColor;\n\n          addNewEventListener(p.path._renderer.elem, \"click\", (e) => {\n            const newVec = addMidpoint(p);\n            const anchor = new Two.Anchor(\n              newVec.p.translation.x,\n              newVec.p.translation.y,\n              100 * Math.cos(newVec.r.rotation + Math.PI / 2),\n              100 * Math.sin(newVec.r.rotation + Math.PI / 2),\n              -100 * Math.cos(newVec.r.rotation + Math.PI / 2),\n              -100 * Math.sin(newVec.r.rotation + Math.PI / 2),\n              \"C\"\n            );\n            const anchors = p.path.vertices;\n            anchors.splice(1, 0, anchor); // insert anchor in the middle\n            const newPath = drawLine(anchors);\n            p.path = newPath;\n\n            two.current.remove(newVec.p, newVec.r);\n            createAnchorPoint(anchor, p.path, key, p.vectors.length - 1);\n            props.setMode(\"EDIT\");\n          });\n        });\n        break;\n      case \"REMOVE_POINTS\":\n        removeAllEventListeners();\n\n        props.paths.forEach((p, key, map) => {\n          if (!p.path) return;\n\n          p.vectors.forEach((v) => {\n            v.p.fill = neutralColor;\n            v.r.fill = neutralColor;\n          });\n          p.path.stroke = editColor;\n\n          addNewEventListener(p.path._renderer.elem, \"click\", (e) => {\n            const anchors = p.path.vertices;\n            anchors.pop();\n            if (anchors.length < 2) {\n              p.vectors.forEach((v) => {\n                v.g.remove();\n                if (v.s) group.current.remove(v.s);\n              });\n              two.current.remove(p.path);\n              props.paths.delete(key);\n              props.setPaths(new Map(props.paths));\n            } else {\n              const vec = p.vectors.pop();\n              vec.g.remove();\n              const newPath = drawLine(anchors);\n              p.path = newPath;\n              two.current.update();\n              props.setPaths(new Map(map.set(key, p)));\n            }\n          });\n        });\n        break;\n      default:\n        break;\n    }\n    prevMode.current = props.mode;\n  });\n\n  /**\n   * Handle the field state\n   */\n  useEffect(() => {\n    if (props.field === prevField.current) {\n      // The below state machine only operates on the state transitions\n      return;\n    }\n\n    blueBalls.current?.remove();\n    redBalls.current?.remove();\n\n    switch (props.field) {\n      case \"COMP\":\n        compSetup();\n        break;\n      case \"SKILLS\":\n        skillsSetup();\n        break;\n      case \"NONE\":\n      default:\n        break;\n    }\n    prevField.current = props.field;\n  });\n\n  return <div ref={mount}></div>;\n};\n","import React from \"react\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Box from \"@material-ui/core/Box\";\nimport { CopyBlock, atomOneDark } from \"react-code-blocks\";\n\nimport { FIELD_METERS } from \"./units\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box\n          pt={2}\n          p={1}\n          style={{ backgroundColor: \"#282c34\" /* match the OneDark bg */ }}\n        >\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    maxWidth: 800,\n  },\n}));\n\nexport interface CanvasDims {\n  x: number;\n  y: number;\n}\nexport interface SimpleTabsProps {\n  paths: Map<string, any>;\n  trackWidth: string;\n  maxVel: string;\n  maxAccel: string;\n  maxJerk: string;\n  canvasDims: CanvasDims;\n}\n\nexport default function SimpleTabs(props: SimpleTabsProps) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const squigglesCoords = (x: number, y: number, yaw: number) => ({\n    // TODO: check if the starting position is top left\n    // Make (0, 0) be the bottom left, then X is up and Y is right for Okapi\n    x: (x / props.canvasDims.x) * FIELD_METERS,\n    y: (1 - y / props.canvasDims.y) * FIELD_METERS,\n    yaw: -1 * (yaw + Math.PI / 2),\n  });\n\n  const okapiCoords = (x: number, y: number, yaw: number) => ({\n    // TODO: check if the starting position is top left\n    // Make (0, 0) be the bottom left, then X is up and Y is right for Okapi\n    x: (1 - y / props.canvasDims.y) * FIELD_METERS,\n    y: (x / props.canvasDims.x) * FIELD_METERS,\n    yaw: yaw,\n  });\n\n  const squigglesCode = () => {\n    let out = \"#define PATH_DT             (0.01)\\n\";\n    out += `#define PATH_MAX_VEL        (${props.maxVel})\\n`;\n    out += `#define PATH_MAX_ACCEL      (${props.maxAccel})\\n`;\n    out += `#define PATH_MAX_JERK       (${props.maxJerk})\\n`;\n    out += `#define CHASSIS_TRACK_WIDTH (${props.trackWidth})\\n\\n`;\n    out +=\n      \"auto constraints = squiggles::Constraints(PATH_MAX_VEL, PATH_MAX_ACCEL, PATH_MAX_JERK);\\n\";\n    out += `auto model = std::make_shared<squiggles::TankModel>(CHASSIS_TRACK_WIDTH, constraints);\\n`;\n    out +=\n      \"auto generator = squiggles::SplineGenerator(constraints, model, PATH_DT);\\n\\n\";\n    out += Array.from(props.paths)\n      .slice(0, -1)\n      .map(([k, v]) => {\n        let path = `auto path${k} = generator.generate({\\n`;\n        for (let i = v.vectors.length - 1; i >= 0; --i) {\n          const vec = v.vectors[i];\n          let yaw = vec.r.rotation;\n          const coords = squigglesCoords(\n            vec.p.translation.x,\n            vec.p.translation.y,\n            yaw\n          );\n          const x = coords.x;\n          const y = coords.y;\n          yaw = coords.yaw;\n          // TODO: should this be added to affect the path shape?\n          // const vel = Math.sqrt(\n          //   Math.pow(vec.r.translation.y - y, 2) +\n          //     Math.pow(vec.r.translation.x - x, 2)\n          // );\n          path += `\\tsquiggles::ControlVector(squiggles::Pose(${x.toFixed(\n            3\n          )}, ${y.toFixed(3)}, ${yaw.toFixed(3)})})`;\n          if (i < v.vectors.length - 1) {\n            path += \",\\n\";\n          } else {\n            path += \"\\n\";\n          }\n        }\n        path += \"});\\n\";\n        return path;\n      })\n      .join(\"\");\n    return out;\n  };\n\n  const okapiCode = () => {\n    let out = \"// TODO: Fill in the info below for your robot\\n\";\n    out += \"#define LEFT_CHASSIS_MOTOR_PORTS ({1, 2})\\n\";\n    out += \"#define RIGHT_CHASSIS_MOTOR_PORTS ({3, 4})\\n\";\n    out += \"#define WHEEL_DIAMETER (4_in)\\n\";\n    out +=\n      \"#define CHASSIS_MOTOR_CARTRIDGE (okapi::AbstractMotor::gearset::green)\\n\";\n    out +=\n      \"#define CHASSIS_CARTRIDGE_TICKS (imev5GreenTPR) // Should match above\\n\\n\";\n    out += `#define PATH_MAX_VEL        (${props.maxVel})\\n`;\n    out += `#define PATH_MAX_ACCEL      (${props.maxAccel})\\n`;\n    out += `#define PATH_MAX_JERK       (${props.maxJerk})\\n`;\n    out += `#define CHASSIS_TRACK_WIDTH (${props.trackWidth}_m)\\n\\n`;\n    out += \"auto chassis = okapi::ChassisControllerBuilder()\\n\";\n    out +=\n      \"\\t.withMotors(LEFT_CHASSIS_MOTOR_PORTS, RIGHT_CHASSIS_MOTOR_PORTS)\\n\";\n    out += \"\\t.withDimensions(\\n\";\n    out += \"\\t\\tCHASSIS_MOTOR_CARTRIDGE,\\n\";\n    out +=\n      \"\\t\\t{{WHEEL_DIAMETER, CHASSIS_TRACK_WIDTH}, CHASSIS_CARTRIDGE_TICKS})\\n\";\n    out += \"\\t.build();\\n\";\n    out +=\n      \"auto profileController = okapi::AsyncMotionProfileControllerBuilder()\\n\";\n    out += \"\\t.withLimits({PATH_MAX_VEL, PATH_MAX_ACCEL, PATH_MAX_JERK})\\n\";\n    out += \"\\t.withOutput(chassis)\\n\";\n    out += \"\\t.buildMotionProfileController();\\n\\n\";\n    out += \"/**\\n\";\n    out += \" * The Coordinate System for Okapi Points is:\\n\";\n    out += \" * ^\\n\";\n    out += \" * | x\\n\";\n    out += \" * |    ↷ yaw\\n\";\n    out += \" * |   y\\n\";\n    out += \" * ------>\\n\";\n    out += \" */\\n\";\n    out += Array.from(props.paths)\n      .slice(0, -1)\n      .map(([k, v]) => {\n        let path = \"profileController->generatePath({\\n\";\n        for (let i = v.vectors.length - 1; i >= 0; --i) {\n          const vec = v.vectors[i];\n          let yaw = vec.r.rotation;\n          const coords = okapiCoords(\n            vec.p.translation.x,\n            vec.p.translation.y,\n            yaw\n          );\n          const x = coords.x;\n          const y = coords.y;\n          yaw = coords.yaw;\n          path += `\\t{${x.toFixed(3)}_m, ${y.toFixed(3)}_m, ${yaw.toFixed(\n            3\n          )}_rad},\\n`;\n        }\n        path += `\\t\"${k}\"\\n});\\n`;\n        return path;\n      })\n      .join(\"\");\n    return out;\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"simple tabs example\"\n        >\n          <Tab label=\"Okapi\" {...a11yProps(0)} />\n          <Tab label=\"Squiggles\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <CopyBlock\n          text={okapiCode()}\n          language={\"cpp\"}\n          showLineNumbers={true}\n          theme={atomOneDark}\n          codeBlock\n        />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <CopyBlock\n          text={squigglesCode()}\n          language={\"cpp\"}\n          showLineNumbers={true}\n          theme={atomOneDark}\n          codeBlock\n        />\n      </TabPanel>\n    </div>\n  );\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst themeColor = \"rgb(50, 168, 82)\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"rgb(102, 204, 129)\",\n      main: themeColor,\n      dark: themeColor,\n    },\n  },\n  overrides: {\n    MuiToggleButton: {\n      root: {\n        \"&$selected\": {\n          color: \"#fff\",\n          backgroundColor: themeColor,\n        },\n      },\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport {\n  IconButton,\n  Divider,\n  List,\n  ListItem,\n  Typography,\n  TextField,\n  useTheme,\n  MenuItem,\n  Checkbox,\n  FormControlLabel,\n} from \"@material-ui/core\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    drawerHeader: {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: \"flex-end\",\n    },\n  })\n);\n\nexport interface SidebarContentProps {\n  handleDrawerClose: () => void;\n  mode: string;\n  setMode: (mode: string) => void;\n  field: string;\n  setField: (field: string) => void;\n  trackWidth: string;\n  setTrackWidth: (trackWidth: string) => void;\n  maxVel: string;\n  setMaxVel: (maxVel: string) => void;\n  maxAccel: string;\n  setMaxAccel: (maxAccel: string) => void;\n  maxJerk: string;\n  setMaxJerk: (maxJerk: string) => void;\n  latch: boolean;\n  setLatch: (latch: boolean) => void;\n}\n\nexport const SidebarContent = (props: SidebarContentProps) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const seasons = [\"2020-2021 Change Up\"];\n\n  return (\n    <>\n      <div className={classes.drawerHeader}>\n        <IconButton onClick={props.handleDrawerClose}>\n          {theme.direction === \"ltr\" ? (\n            <ChevronLeftIcon />\n          ) : (\n            <ChevronRightIcon />\n          )}\n        </IconButton>\n      </div>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Mode</Typography>\n        </ListItem>\n        <ListItem key={\"mode\"}>\n          <ToggleButtonGroup\n            value={props.mode}\n            size=\"small\"\n            exclusive\n            onChange={(e, newMode) => {\n              if (newMode !== null) {\n                props.setMode(newMode);\n              }\n            }}\n            aria-label=\"path add/edit mode\"\n          >\n            <ToggleButton value=\"ADD_PATH\" aria-label=\"left aligned\">\n              ADD PATH\n            </ToggleButton>\n            <ToggleButton value=\"EDIT\" aria-label=\"centered\">\n              MOVE\n            </ToggleButton>\n            <ToggleButton value=\"ADD_POINTS\" aria-label=\"centered\">\n              ADD POINTS\n            </ToggleButton>\n            <ToggleButton value=\"REMOVE_POINTS\" aria-label=\"centered\">\n              REMOVE POINTS\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </ListItem>\n        <ListItem>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={props.latch}\n                onChange={(e) => props.setLatch(e.target.checked)}\n                name=\"Latch\"\n                color=\"primary\"\n              />\n            }\n            label={\"Latch to Cardinal Directions\"}\n          />\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Robot Specs</Typography>\n        </ListItem>\n        <ListItem>\n          {/* TODO: validate that these values are floats */}\n          <TextField\n            variant=\"outlined\"\n            required\n            label=\"Track Width (m)\"\n            value={props.trackWidth}\n            onChange={(e) => props.setTrackWidth(e.target.value)}\n          />\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            required\n            label=\"Max Velocity (m/s)\"\n            value={props.maxVel}\n            onChange={(e) => props.setMaxVel(e.target.value)}\n          />\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            label=\"Max Acceleration (m/s/s)\"\n            value={props.maxAccel}\n            onChange={(e) => props.setMaxAccel(e.target.value)}\n          />\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            label=\"Max Jerk (m/s/s/s)\"\n            value={props.maxJerk}\n            onChange={(e) => props.setMaxJerk(e.target.value)}\n          />\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Field Setup</Typography>\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            id=\"season-select\"\n            select\n            label=\"Comp Season\"\n            defaultValue={seasons[0]}\n          >\n            {seasons.map((s) => (\n              <MenuItem key={s} value={s}>\n                {s}\n              </MenuItem>\n            ))}\n          </TextField>\n        </ListItem>\n        <ListItem>\n          <ToggleButtonGroup\n            value={props.field}\n            exclusive\n            onChange={(e, newField) => {\n              if (newField !== null) {\n                props.setField(newField);\n              }\n            }}\n            aria-label=\"path add/edit mode\"\n          >\n            <ToggleButton value=\"COMP\" aria-label=\"left aligned\">\n              COMP\n            </ToggleButton>\n            <ToggleButton value=\"SKILLS\" aria-label=\"centered\">\n              AUTON\n            </ToggleButton>\n            <ToggleButton value=\"NONE\" aria-label=\"centered\">\n              NONE\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </ListItem>\n      </List>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { DrawNewPath } from \"./components\";\nimport SimpleTabs from \"./components/generated\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport theme from \"./theme\";\nimport { SidebarContent } from \"./components/sidebar\";\n\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n    appBar: {\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: \"none\",\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: \"flex-end\",\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n      overflow: \"hidden\",\n    },\n    contentShift: {\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n  })\n);\n\nexport const App = (props: any) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false); // setting this to true breaks the alignment of two.js\n  const [mode, setMode] = useState(\"ADD_PATH\");\n  const [latch, setLatch] = useState(true);\n  const [field, setField] = useState(\"NONE\");\n  const [trackWidth, setTrackWidth] = useState(\"0.45\");\n  const [maxVel, setMaxVel] = useState(\"1.0\");\n  const [maxAccel, setMaxAccel] = useState(\"2.0\");\n  const [maxJerk, setMaxJerk] = useState(\"10.0\");\n  const [canvasDims, setCanvasDims] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight,\n  });\n\n  /**\n   * Map of the data associated with each Squiggles path.\n   *\n   * Of the form:\n   *\n   * \"A\": {\n   *   \"waypoints\": <Two.Circle>[],\n   *   \"vectors\": <Two.Vector>[],\n   *   \"path\": Two.Path\n   * }\n   */\n  const [paths, setPaths] = useState(new Map());\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, open && classes.hide)}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n              Squiggles Drawing Board\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={open}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <SidebarContent\n            handleDrawerClose={handleDrawerClose}\n            mode={mode}\n            setMode={setMode}\n            field={field}\n            setField={setField}\n            trackWidth={trackWidth}\n            setTrackWidth={setTrackWidth}\n            maxVel={maxVel}\n            setMaxVel={setMaxVel}\n            maxAccel={maxAccel}\n            setMaxAccel={setMaxAccel}\n            maxJerk={maxJerk}\n            setMaxJerk={setMaxJerk}\n            latch={latch}\n            setLatch={setLatch}\n          />\n        </Drawer>\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <div className={classes.drawerHeader} />\n          <DrawNewPath\n            drawerWidth={drawerWidth}\n            open={open}\n            mode={mode}\n            setMode={setMode}\n            field={field}\n            paths={paths}\n            setPaths={setPaths}\n            setCanvasDims={setCanvasDims}\n            latch={latch}\n            trackWidth={trackWidth}\n          />\n          <SimpleTabs\n            paths={paths}\n            trackWidth={trackWidth}\n            maxVel={maxVel}\n            maxAccel={maxAccel}\n            maxJerk={maxJerk}\n            canvasDims={canvasDims}\n          />\n        </main>\n      </div>\n    </ThemeProvider>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./app\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}