[{"/home/bayle/Documents/git/robotsquiggles/web-react/src/index.tsx":"1","/home/bayle/Documents/git/robotsquiggles/web-react/src/reportWebVitals.ts":"2","/home/bayle/Documents/git/robotsquiggles/web-react/src/components/index.ts":"3","/home/bayle/Documents/git/robotsquiggles/web-react/src/app.tsx":"4","/home/bayle/Documents/git/robotsquiggles/web-react/src/components/new_path.jsx":"5","/home/bayle/Documents/git/robotsquiggles/web-react/src/components/generated.tsx":"6","/home/bayle/Documents/git/robotsquiggles/web-react/src/theme.js":"7"},{"size":504,"mtime":1609011732981,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1608741115116,"results":"10","hashOfConfig":"9"},{"size":28,"mtime":1609101496551,"results":"11","hashOfConfig":"9"},{"size":7595,"mtime":1609120443192,"results":"12","hashOfConfig":"9"},{"size":11748,"mtime":1609116739177,"results":"13","hashOfConfig":"9"},{"size":1961,"mtime":1609110360392,"results":"14","hashOfConfig":"9"},{"size":359,"mtime":1609120595799,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"7xnx51",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/bayle/Documents/git/robotsquiggles/web-react/src/index.tsx",[],["33","34"],"/home/bayle/Documents/git/robotsquiggles/web-react/src/reportWebVitals.ts",[],"/home/bayle/Documents/git/robotsquiggles/web-react/src/components/index.ts",[],"/home/bayle/Documents/git/robotsquiggles/web-react/src/app.tsx",["35"],"import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { TextField } from \"@material-ui/core\";\nimport { DrawNewPath } from \"./components\";\nimport SimpleTabs from \"./components/generated\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport theme from \"./theme\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n    appBar: {\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: \"none\",\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: \"flex-end\",\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n      overflow: \"hidden\",\n    },\n    contentShift: {\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n  })\n);\n\nexport const App = (props: any) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false); // setting this to true breaks the alignment of two.js\n  const [mode, setMode] = useState(\"PLACE_POINTS\");\n  const [field, setField] = useState(\"NONE\");\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, open && classes.hide)}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n              Squiggles Drawing Board\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={open}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === \"ltr\" ? (\n                <ChevronLeftIcon />\n              ) : (\n                <ChevronRightIcon />\n              )}\n            </IconButton>\n          </div>\n          <Divider />\n          <List>\n            <ListItem>\n              <Typography variant=\"subtitle1\">Mode</Typography>\n            </ListItem>\n            <ListItem key={\"mode\"}>\n              <ToggleButtonGroup\n                value={mode}\n                exclusive\n                onChange={(e, newMode) => {\n                  if (newMode !== null) {\n                    setMode(newMode);\n                  }\n                }}\n                aria-label=\"path add/edit mode\"\n              >\n                <ToggleButton value=\"PLACE_POINTS\" aria-label=\"left aligned\">\n                  PLACE POINTS\n                </ToggleButton>\n                <ToggleButton value=\"EDIT\" aria-label=\"centered\">\n                  EDIT\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </ListItem>\n          </List>\n          <Divider />\n          <List>\n            <ListItem>\n              <Typography variant=\"subtitle1\">Robot Specs</Typography>\n            </ListItem>\n            <ListItem>\n              <TextField\n                variant=\"outlined\"\n                required\n                label=\"Track Width (m)\"\n                defaultValue=\"0.5\"\n              />\n            </ListItem>\n            <ListItem>\n              <TextField\n                variant=\"outlined\"\n                required\n                label=\"Max Velocity (m/s)\"\n                defaultValue=\"1.0\"\n              />\n            </ListItem>\n            <ListItem>\n              <TextField\n                variant=\"outlined\"\n                label=\"Max Acceleration (m/s/s)\"\n                defaultValue=\"2.0\"\n              />\n            </ListItem>\n            <ListItem>\n              <TextField\n                variant=\"outlined\"\n                label=\"Max Jerk (m/s/s/s)\"\n                defaultValue=\"10.0\"\n              />\n            </ListItem>\n          </List>\n          <Divider />\n          <List>\n            <ListItem>\n              <Typography variant=\"subtitle1\">Field Setup</Typography>\n            </ListItem>\n            <ListItem>TBD: change the comp year?</ListItem>\n            <ListItem>\n              <ToggleButtonGroup\n                value={field}\n                exclusive\n                onChange={(e, newField) => {\n                  if (newField !== null) {\n                    setField(newField);\n                  }\n                }}\n                aria-label=\"path add/edit mode\"\n              >\n                <ToggleButton value=\"COMP\" aria-label=\"left aligned\">\n                  COMP\n                </ToggleButton>\n                <ToggleButton value=\"SKILLS\" aria-label=\"centered\">\n                  AUTON\n                </ToggleButton>\n                <ToggleButton value=\"NONE\" aria-label=\"centered\">\n                  NONE\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </ListItem>\n          </List>\n        </Drawer>\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <div className={classes.drawerHeader} />\n          <DrawNewPath drawerWidth={240} open={open} />\n          {/** Below will be generated code */}\n          <SimpleTabs />\n        </main>\n      </div>\n    </ThemeProvider>\n  );\n};\n","/home/bayle/Documents/git/robotsquiggles/web-react/src/components/new_path.jsx",[],["36","37"],"/home/bayle/Documents/git/robotsquiggles/web-react/src/components/generated.tsx",[],"/home/bayle/Documents/git/robotsquiggles/web-react/src/theme.js",["38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":7,"column":3,"nodeType":"45","messageId":"46","endLine":7,"endColumn":17},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"47","severity":1,"message":"48","line":2,"column":10,"nodeType":"45","messageId":"46","endLine":2,"endColumn":14},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"@typescript-eslint/no-unused-vars","'createMuiTheme' is defined but never used.","Identifier","unusedVar","no-unused-vars","'blue' is defined but never used.","no-global-assign","no-unsafe-negation"]